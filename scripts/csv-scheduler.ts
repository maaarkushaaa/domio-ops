import * as fs from 'fs';
import * as cron from 'node-cron';

interface ScheduleTask {
  name: string;
  schedule: string;
  type: 'materials' | 'bom';
  source: {
    type: 'url' | 'file';
    url?: string;
    file?: string;
  };
  enabled: boolean;
}

interface ScheduleConfig {
  tasks: ScheduleTask[];
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  scheduleFile: process.env.SCHEDULE_FILE || './csv-schedule.json',
  apiUrl: process.env.API_URL || 'http://localhost:3000/api/csv-import',
  apiKey: process.env.CSV_IMPORT_API_KEY || '',
  slackWebhook: process.env.SLACK_WEBHOOK_URL || ''
};

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Slack
async function sendSlackNotification(message: string, isError = false) {
  if (!config.slackWebhook) return;
  
  try {
    const emoji = isError ? '‚ùå' : '‚úÖ';
    const payload = {
      text: `${emoji} CSV Scheduler: ${message}`,
      username: 'CSV Scheduler',
      icon_emoji: ':clock1:'
    };
    
    await fetch(config.slackWebhook, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Slack —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
  }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
function loadScheduleConfig(): ScheduleConfig {
  try {
    if (fs.existsSync(config.scheduleFile)) {
      const content = fs.readFileSync(config.scheduleFile, 'utf-8');
      return JSON.parse(content);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
  }
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  return {
    tasks: [
      {
        name: 'daily-materials-import',
        schedule: '0 9 * * *', // –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00
        type: 'materials',
        source: {
          type: 'url',
          url: 'https://supplier.com/api/materials.csv'
        },
        enabled: false
      }
    ]
  };
}

// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É –∏–º–ø–æ—Ä—Ç–∞
async function executeImportTask(task: ScheduleTask): Promise<{ success: boolean; message: string }> {
  try {
    console.log(`üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: ${task.name}`);
    
    let csvData: string;
    
    if (task.source.type === 'url') {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ URL
      if (!task.source.url) {
        throw new Error('URL –Ω–µ —É–∫–∞–∑–∞–Ω –¥–ª—è –∑–∞–¥–∞—á–∏');
      }
      
      const response = await fetch(task.source.url);
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      csvData = await response.text();
    } else if (task.source.type === 'file') {
      // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
      if (!task.source.file) {
        throw new Error('–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ —É–∫–∞–∑–∞–Ω –¥–ª—è –∑–∞–¥–∞—á–∏');
      }
      
      if (!fs.existsSync(task.source.file)) {
        throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${task.source.file}`);
      }
      
      csvData = fs.readFileSync(task.source.file, 'utf-8');
    } else {
      throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞');
    }
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    const tempFile = `temp_${task.name}_${Date.now()}.csv`;
    fs.writeFileSync(tempFile, csvData);
    
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ API
      const formData = new FormData();
      const fileBuffer = fs.readFileSync(tempFile);
      const blob = new Blob([fileBuffer], { type: 'text/csv' });
      
      formData.append('file', blob, tempFile);
      formData.append('type', task.type);
      
      if (config.apiKey) {
        formData.append('api_key', config.apiKey);
      }
      
      const response = await fetch(config.apiUrl, {
        method: 'POST',
        body: formData
      });
      
      const result = await response.json();
      
      if (response.ok) {
        const message = `–ó–∞–¥–∞—á–∞ ${task.name} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: ${result.success}, –û—à–∏–±–æ–∫: ${result.errors}`;
        console.log(`‚úÖ ${message}`);
        
        await sendSlackNotification(message);
        
        return { success: true, message };
      } else {
        throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API');
      }
      
    } finally {
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      if (fs.existsSync(tempFile)) {
        fs.unlinkSync(tempFile);
      }
    }
    
  } catch (error) {
    const errorMessage = `–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ ${task.name}: ${(error as Error).message}`;
    console.error(`‚ùå ${errorMessage}`);
    
    await sendSlackNotification(errorMessage, true);
    
    return { success: false, message: errorMessage };
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function startScheduler() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ CSV Scheduler');
  console.log(`üìÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${config.scheduleFile}`);
  console.log(`üîó API URL: ${config.apiUrl}`);
  
  const scheduleConfig = loadScheduleConfig();
  
  if (scheduleConfig.tasks.length === 0) {
    console.log('‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
    return;
  }
  
  console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${scheduleConfig.tasks.length} –∑–∞–¥–∞—á:`);
  
  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
  for (const task of scheduleConfig.tasks) {
    if (!task.enabled) {
      console.log(`‚è∏Ô∏è –ó–∞–¥–∞—á–∞ ${task.name} –æ—Ç–∫–ª—é—á–µ–Ω–∞`);
      continue;
    }
    
    if (!cron.validate(task.schedule)) {
      console.error(`‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏ ${task.name}: ${task.schedule}`);
      continue;
    }
    
    console.log(`‚è∞ –ó–∞–¥–∞—á–∞ ${task.name}: ${task.schedule} (${task.type})`);
    
    cron.schedule(task.schedule, async () => {
      console.log(`‚è∞ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: ${task.name}`);
      await executeImportTask(task);
    });
  }
  
  console.log('üëÄ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–∫—Ç–∏–≤–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á...');
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  process.on('SIGINT', () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...');
    process.exit(0);
  });
  
  process.on('SIGTERM', () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...');
    process.exit(0);
  });
}

// –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
function createExampleConfig() {
  const exampleConfig: ScheduleConfig = {
    tasks: [
      {
        name: 'daily-materials-import',
        schedule: '0 9 * * *', // –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00
        type: 'materials',
        source: {
          type: 'url',
          url: 'https://supplier.com/api/materials.csv'
        },
        enabled: false
      },
      {
        name: 'weekly-bom-import',
        schedule: '0 8 * * 1', // –ö–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 8:00
        type: 'bom',
        source: {
          type: 'file',
          file: './data/bom-export.csv'
        },
        enabled: false
      },
      {
        name: 'hourly-stock-update',
        schedule: '0 * * * *', // –ö–∞–∂–¥—ã–π —á–∞—Å
        type: 'materials',
        source: {
          type: 'url',
          url: 'https://warehouse.com/api/stock.csv'
        },
        enabled: false
      }
    ]
  };
  
  if (!fs.existsSync(config.scheduleFile)) {
    fs.writeFileSync(config.scheduleFile, JSON.stringify(exampleConfig, null, 2));
    console.log(`üìÑ –°–æ–∑–¥–∞–Ω –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${config.scheduleFile}`);
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  createExampleConfig();
  
  startScheduler().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

export { startScheduler, executeImportTask, loadScheduleConfig };
