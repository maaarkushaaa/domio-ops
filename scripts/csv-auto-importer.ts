import fs from 'fs';
import path from 'path';
import chokidar from 'chokidar';
import FormData from 'form-data';
import fetch from 'node-fetch';

interface CSVImportConfig {
  watchFolder: string;
  apiEndpoint: string;
  apiKey: string;
  filePattern: RegExp;
  processedFolder: string;
  errorFolder: string;
}

class CSVAutoImporter {
  private config: CSVImportConfig;
  private watcher: chokidar.FSWatcher | null = null;

  constructor(config: CSVImportConfig) {
    this.config = config;
    this.ensureDirectories();
  }

  private ensureDirectories() {
    // –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
    [this.config.watchFolder, this.config.processedFolder, this.config.errorFolder].forEach(dir => {
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
      }
    });
  }

  public startWatching() {
    console.log(`üîç –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–ø–∫–∏: ${this.config.watchFolder}`);
    
    this.watcher = chokidar.watch(this.config.watchFolder, {
      ignored: /(^|[\/\\])\../, // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã
      persistent: true,
      ignoreInitial: false // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ –ø–∞–ø–∫–µ
    });

    this.watcher
      .on('add', (filePath) => this.handleNewFile(filePath))
      .on('change', (filePath) => this.handleNewFile(filePath))
      .on('error', (error) => console.error('–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error));

    console.log('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ CSV —Ñ–∞–π–ª–æ–≤ –∑–∞–ø—É—â–µ–Ω');
  }

  public stopWatching() {
    if (this.watcher) {
      this.watcher.close();
      this.watcher = null;
      console.log('‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
  }

  private async handleNewFile(filePath: string) {
    const fileName = path.basename(filePath);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –Ω–∞—à–µ–º—É –ø–∞—Ç—Ç–µ—Ä–Ω—É
    if (!this.config.filePattern.test(fileName)) {
      console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª: ${fileName} (–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—É)`);
      return;
    }

    console.log(`üìÅ –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª: ${fileName}`);

    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–º–ø–æ—Ä—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
      const importType = this.getImportType(fileName);
      
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª
      const result = await this.importFile(filePath, importType);
      
      if (result.success) {
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: ${fileName}`);
        console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result.result.success} —É—Å–ø–µ—à–Ω–æ, ${result.result.errors} –æ—à–∏–±–æ–∫`);
        
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
        await this.moveFile(filePath, this.config.processedFolder, fileName);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        await this.sendNotification('success', fileName, result.result);
      } else {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ${fileName}`);
        
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É –æ—à–∏–±–æ–∫
        await this.moveFile(filePath, this.config.errorFolder, fileName);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await this.sendNotification('error', fileName, result);
      }
      
    } catch (error) {
      console.error(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${fileName}:`, error);
      
      // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É –æ—à–∏–±–æ–∫
      await this.moveFile(filePath, this.config.errorFolder, fileName);
      
      await this.sendNotification('error', fileName, { error: (error as Error).message });
    }
  }

  private getImportType(fileName: string): 'materials' | 'bom' {
    const lowerName = fileName.toLowerCase();
    
    if (lowerName.includes('materials') || lowerName.includes('stock') || lowerName.includes('–æ—Å—Ç–∞—Ç–∫–∏')) {
      return 'materials';
    } else if (lowerName.includes('bom') || lowerName.includes('—Å–æ—Å—Ç–∞–≤') || lowerName.includes('–º–∞—Ç–µ—Ä–∏–∞–ª—ã_–∏–∑–¥–µ–ª–∏–π')) {
      return 'bom';
    } else {
      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
      return 'materials';
    }
  }

  private async importFile(filePath: string, type: 'materials' | 'bom') {
    try {
      const fileBuffer = fs.readFileSync(filePath);
      
      const formData = new FormData();
      formData.append('file', fileBuffer, path.basename(filePath));
      formData.append('type', type);
      formData.append('apiKey', this.config.apiKey);

      const response = await fetch(this.config.apiEndpoint, {
        method: 'POST',
        body: formData
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(`API Error: ${errorData.error || response.statusText}`);
      }

      const result = await response.json();
      return { success: true, result: result.result };
      
    } catch (error) {
      return { 
        success: false, 
        error: (error as Error).message 
      };
    }
  }

  private async moveFile(sourcePath: string, targetDir: string, fileName: string) {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const newFileName = `${timestamp}_${fileName}`;
    const targetPath = path.join(targetDir, newFileName);
    
    fs.renameSync(sourcePath, targetPath);
    console.log(`üì¶ –§–∞–π–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω: ${fileName} ‚Üí ${newFileName}`);
  }

  private async sendNotification(type: 'success' | 'error', fileName: string, data: any) {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:
    // - Email
    // - Slack
    // - Telegram
    // - Webhook
    
    const message = type === 'success' 
      ? `‚úÖ CSV –∏–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω: ${fileName}`
      : `‚ùå –û—à–∏–±–∫–∞ CSV –∏–º–ø–æ—Ä—Ç–∞: ${fileName}`;
    
    console.log(`üì¢ ${message}`, data);
    
    // –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Slack (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω webhook)
    if (process.env.SLACK_WEBHOOK_URL) {
      try {
        await fetch(process.env.SLACK_WEBHOOK_URL, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            text: message,
            attachments: [{
              color: type === 'success' ? 'good' : 'danger',
              fields: [
                { title: '–§–∞–π–ª', value: fileName, short: true },
                { title: '–í—Ä–µ–º—è', value: new Date().toLocaleString('ru-RU'), short: true },
                { title: '–î–µ—Ç–∞–ª–∏', value: JSON.stringify(data, null, 2), short: false }
              ]
            }]
          })
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Slack:', error);
      }
    }
  }
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ä–µ–¥
const configs = {
  development: {
    watchFolder: './csv-import/watch',
    apiEndpoint: 'http://localhost:3000/api/csv-import',
    apiKey: process.env.CSV_IMPORT_API_KEY || 'dev-key-123',
    filePattern: /\.(csv|CSV)$/,
    processedFolder: './csv-import/processed',
    errorFolder: './csv-import/errors'
  },
  production: {
    watchFolder: process.env.CSV_WATCH_FOLDER || '/var/csv-import/watch',
    apiEndpoint: process.env.CSV_API_ENDPOINT || 'https://your-domain.com/api/csv-import',
    apiKey: process.env.CSV_IMPORT_API_KEY || '',
    filePattern: /\.(csv|CSV)$/,
    processedFolder: process.env.CSV_PROCESSED_FOLDER || '/var/csv-import/processed',
    errorFolder: process.env.CSV_ERROR_FOLDER || '/var/csv-import/errors'
  }
};

// –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
const environment = process.env.NODE_ENV || 'development';
const config = configs[environment as keyof typeof configs];

if (!config.apiKey) {
  console.error('‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω CSV_IMPORT_API_KEY');
  process.exit(1);
}

const importer = new CSVAutoImporter(config);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
  importer.stopWatching();
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
  importer.stopWatching();
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
importer.startWatching();

export default CSVAutoImporter;
