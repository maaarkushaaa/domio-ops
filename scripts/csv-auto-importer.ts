import * as fs from 'fs';
import * as path from 'path';
import * as chokidar from 'chokidar';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  watchFolder: process.env.WATCH_FOLDER || './csv-imports',
  apiUrl: process.env.API_URL || 'http://localhost:3000/api/csv-import',
  apiKey: process.env.CSV_IMPORT_API_KEY || '',
  processedFolder: './csv-imports/processed',
  errorFolder: './csv-imports/errors',
  slackWebhook: process.env.SLACK_WEBHOOK_URL || ''
};

// –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
function ensureDirectories() {
  [config.watchFolder, config.processedFolder, config.errorFolder].forEach(dir => {
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
      console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: ${dir}`);
    }
  });
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–º–ø–æ—Ä—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
function getImportType(filename: string): 'materials' | 'bom' | null {
  const lowerName = filename.toLowerCase();
  
  if (lowerName.includes('materials') || lowerName.includes('–º–∞—Ç–µ—Ä–∏–∞–ª—ã') || lowerName.includes('–æ—Å—Ç–∞—Ç–∫–∏')) {
    return 'materials';
  }
  
  if (lowerName.includes('bom') || lowerName.includes('—Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è') || lowerName.includes('–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è')) {
    return 'bom';
  }
  
  return null;
}

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Slack
async function sendSlackNotification(message: string, isError = false) {
  if (!config.slackWebhook) return;
  
  try {
    const emoji = isError ? '‚ùå' : '‚úÖ';
    const payload = {
      text: `${emoji} CSV Auto-Import: ${message}`,
      username: 'CSV Importer',
      icon_emoji: ':file_folder:'
    };
    
    await fetch(config.slackWebhook, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Slack —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
  }
}

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º CSV —Ñ–∞–π–ª
async function importCsvFile(filePath: string): Promise<{ success: boolean; message: string }> {
  const filename = path.basename(filePath);
  const importType = getImportType(filename);
  
  if (!importType) {
    return {
      success: false,
      message: `–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∏–º–ø–æ—Ä—Ç–∞ –¥–ª—è —Ñ–∞–π–ª–∞: ${filename}`
    };
  }
  
  try {
    console.log(`üîÑ –ò–º–ø–æ—Ä—Ç —Ñ–∞–π–ª–∞: ${filename} (—Ç–∏–ø: ${importType})`);
    
    const formData = new FormData();
    const fileBuffer = fs.readFileSync(filePath);
    const blob = new Blob([fileBuffer], { type: 'text/csv' });
    
    formData.append('file', blob, filename);
    formData.append('type', importType);
    
    if (config.apiKey) {
      formData.append('api_key', config.apiKey);
    }
    
    const response = await fetch(config.apiUrl, {
      method: 'POST',
      body: formData
    });
    
    const result = await response.json();
    
    if (response.ok) {
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: ${filename}`);
      console.log(`   –£—Å–ø–µ—à–Ω–æ: ${result.success}, –û—à–∏–±–æ–∫: ${result.errors}`);
      
      // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É processed
      const processedPath = path.join(config.processedFolder, filename);
      fs.renameSync(filePath, processedPath);
      
      await sendSlackNotification(`–ò–º–ø–æ—Ä—Ç ${filename} –∑–∞–≤–µ—Ä—à–µ–Ω. –£—Å–ø–µ—à–Ω–æ: ${result.success}, –û—à–∏–±–æ–∫: ${result.errors}`);
      
      return { success: true, message: result.message };
    } else {
      throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    }
    
  } catch (error) {
    const errorMessage = `–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ ${filename}: ${(error as Error).message}`;
    console.error(`‚ùå ${errorMessage}`);
    
    // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É errors
    const errorPath = path.join(config.errorFolder, filename);
    fs.renameSync(filePath, errorPath);
    
    await sendSlackNotification(errorMessage, true);
    
    return { success: false, message: errorMessage };
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function startWatcher() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ CSV Auto-Importer');
  console.log(`üìÅ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–ø–∫–∏: ${config.watchFolder}`);
  console.log(`üîó API URL: ${config.apiUrl}`);
  
  ensureDirectories();
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
  const existingFiles = fs.readdirSync(config.watchFolder)
    .filter(file => file.toLowerCase().endsWith('.csv'));
  
  if (existingFiles.length > 0) {
    console.log(`üìÑ –ù–∞–π–¥–µ–Ω–æ ${existingFiles.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö CSV —Ñ–∞–π–ª–æ–≤`);
    for (const file of existingFiles) {
      const filePath = path.join(config.watchFolder, file);
      await importCsvFile(filePath);
    }
  }
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
  const watcher = chokidar.watch(path.join(config.watchFolder, '*.csv'), {
    ignored: /(^|[\/\\])\../, // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã
    persistent: true,
    ignoreInitial: true
  });
  
  watcher
    .on('add', async (filePath) => {
      console.log(`üì• –ù–æ–≤—ã–π —Ñ–∞–π–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω: ${path.basename(filePath)}`);
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      await importCsvFile(filePath);
    })
    .on('error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
    });
  
  console.log('üëÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö CSV —Ñ–∞–π–ª–æ–≤...');
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  process.on('SIGINT', () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
    watcher.close();
    process.exit(0);
  });
  
  process.on('SIGTERM', () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
    watcher.close();
    process.exit(0);
  });
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  startWatcher().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

export { startWatcher, importCsvFile };
