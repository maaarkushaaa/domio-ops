import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Separator } from '@/components/ui/separator';
import { 
  BookOpen, 
  FileText, 
  Download, 
  Upload, 
  Settings, 
  Bell,
  CheckCircle,
  AlertTriangle,
  Info,
  Clock,
  Database,
  Zap
} from 'lucide-react';

export default function Knowledge() {
  const knowledgeItems = [
    {
      id: 'csv-import',
      title: 'Автоматический импорт CSV файлов',
      description: 'Подробная инструкция по подключению автоматического импорта данных',
      category: 'Интеграция',
      icon: Upload,
      color: 'bg-blue-500',
      content: `
# 📋 Инструкция по подключению автоматического импорта CSV

## 🎯 Что это такое?

Автоматический импорт CSV позволяет загружать данные о материалах и спецификациях изделий из внешних файлов без ручного ввода. Система может работать в 4 режимах:

1. **Прямая загрузка** - загружаете файл через интерфейс
2. **API интеграция** - внешние системы отправляют данные напрямую
3. **Мониторинг папки** - система автоматически обрабатывает файлы в папке
4. **Планировщик** - регулярный импорт по расписанию

## 🚀 Быстрый старт (для новичков)

### Шаг 1: Подготовка файла

1. **Откройте Excel** с вашими данными
2. **Сохраните как CSV**:
   - Файл → Сохранить как
   - Тип файла: "CSV UTF-8 (разделители - запятые)"
   - Название: \`materials.csv\` или \`bom.csv\`

### Шаг 2: Загрузка через интерфейс

1. **Перейдите в раздел "Производство"**
2. **Нажмите кнопку "Импорт материалов"** или **"Импорт BOM"**
3. **Выберите файл** на компьютере
4. **Нажмите "Импорт"**
5. **Проверьте результат** - система покажет количество успешно загруженных записей

## 📁 Формат файлов

### Для материалов (materials.csv):

| Название | Артикул | Категория | Остаток | Мин.остаток | Поставщик | Единица | Цена |
|----------|---------|-----------|---------|-------------|-----------|---------|------|
| EGGER H1137 ST9 | H1137-ST9 | ЛДСП | 50 | 10 | EGGER | м² | 2500 |
| Кромка ABS 2мм | ABS-2MM | Кромка | 200 | 50 | EGGER | м | 45 |

**Обязательные поля:** Название, Артикул, Остаток, Единица

### Для спецификаций (bom.csv):

| Изделие | Артикул_изделия | Материал | Артикул_материала | Количество | Единица |
|---------|-----------------|----------|-------------------|------------|---------|
| Шкаф кухонный | SK-001 | EGGER H1137 ST9 | H1137-ST9 | 2.5 | м² |
| Шкаф кухонный | SK-001 | Кромка ABS 2мм | ABS-2MM | 8 | м |

**Обязательные поля:** Изделие, Артикул_изделия, Материал, Артикул_материала, Количество

## ⚙️ Настройка автоматического импорта

### Метод 1: Мониторинг папки

**Что это:** Система следит за папкой и автоматически импортирует новые CSV файлы.

**Настройка:**

1. **Создайте папку** для CSV файлов (например: \`C:\\csv-imports\`)

2. **Установите зависимости:**
   \`\`\`bash
   npm install chokidar node-cron tsx @types/node
   \`\`\`

3. **Настройте переменные окружения:**
   \`\`\`bash
   WATCH_FOLDER=C:\\csv-imports
   API_URL=http://localhost:3000/api/csv-import
   CSV_IMPORT_API_KEY=your-secret-key
   \`\`\`

4. **Запустите мониторинг:**
   \`\`\`bash
   node scripts/csv-auto-importer.ts
   \`\`\`

**Как работает:**
- Поместите CSV файл в папку \`C:\\csv-imports\`
- Система автоматически определит тип (materials или bom)
- Файл будет обработан и перемещен в папку \`processed\`
- При ошибке файл переместится в папку \`errors\`

### Метод 2: Планировщик задач

**Что это:** Регулярный импорт данных по расписанию (каждый день, час и т.д.).

**Настройка:**

1. **Создайте файл конфигурации** \`csv-schedule.json\`:
   \`\`\`json
   {
     "tasks": [
       {
         "name": "daily-materials-import",
         "schedule": "0 9 * * *",
         "type": "materials",
         "source": {
           "type": "url",
           "url": "https://supplier.com/api/materials.csv"
         },
         "enabled": true
       }
     ]
   }
   \`\`\`

2. **Запустите планировщик:**
   \`\`\`bash
   node scripts/csv-scheduler.ts
   \`\`\`

**Расписание (cron формат):**
- \`0 9 * * *\` - каждый день в 9:00
- \`0 */4 * * *\` - каждые 4 часа
- \`0 8 * * 1\` - каждый понедельник в 8:00

### Метод 3: API интеграция

**Что это:** Внешние системы отправляют данные напрямую в вашу систему.

**Настройка:**

1. **Получите API ключ** у администратора системы

2. **Отправляйте данные через API:**
   \`\`\`bash
   curl -X POST http://your-domain.com/api/csv-import \\
     -F "type=materials" \\
     -F "file=@materials.csv" \\
     -F "api_key=your-api-key"
   \`\`\`

3. **Или через webhook:**
   \`\`\`bash
   curl -X POST http://your-domain.com/api/webhook/csv \\
     -H "Content-Type: application/json" \\
     -d '{
       "type": "materials",
       "data": [
         {
           "name": "EGGER H1137 ST9",
           "sku": "H1137-ST9",
           "stock_quantity": 50,
           "unit": "м²"
         }
       ]
     }'
   \`\`\`

## 🔔 Настройка уведомлений

### Slack уведомления

1. **Создайте Slack webhook:**
   - Перейдите в Slack → Apps → Incoming Webhooks
   - Выберите канал для уведомлений
   - Скопируйте webhook URL

2. **Настройте переменную окружения:**
   \`\`\`bash
   SLACK_WEBHOOK_URL=https://hooks.slack.com/services/YOUR/WEBHOOK/URL
   \`\`\`

3. **Перезапустите скрипты** - теперь вы будете получать уведомления:
   - ✅ CSV импорт успешен: materials.csv
   - ❌ Ошибка CSV импорта: invalid.csv

### Email уведомления (планируется)

В будущих версиях будет добавлена поддержка email уведомлений.

## 🛠️ Решение проблем

### Проблема: "Файл не импортируется"

**Возможные причины:**
1. **Неправильная кодировка** - сохраните файл в UTF-8
2. **Неправильные разделители** - используйте запятые, не точки с запятой
3. **Отсутствуют обязательные поля** - проверьте заголовки

**Решение:**
1. Откройте файл в текстовом редакторе
2. Убедитесь, что первая строка содержит заголовки
3. Проверьте, что данные разделены запятыми
4. Сохраните в UTF-8 кодировке

### Проблема: "Ошибка авторизации"

**Решение:**
1. Проверьте правильность API ключа
2. Убедитесь, что переменная \`CSV_IMPORT_API_KEY\` установлена
3. Проверьте права доступа к папкам

### Проблема: "Файл не обрабатывается автоматически"

**Решение:**
1. Проверьте, что скрипт мониторинга запущен
2. Убедитесь, что файл имеет расширение \`.csv\`
3. Проверьте права доступа к папке мониторинга

## 📊 Мониторинг и логи

### Просмотр логов импорта

1. **В базе данных:**
   \`\`\`sql
   SELECT * FROM webhook_logs 
   WHERE endpoint = '/api/csv-import'
   ORDER BY created_at DESC 
   LIMIT 10;
   \`\`\`

2. **Статистика за неделю:**
   \`\`\`sql
   SELECT 
     DATE(created_at) as date,
     COUNT(*) as total_imports,
     SUM(CASE WHEN status = 'success' THEN 1 ELSE 0 END) as successful
   FROM webhook_logs 
   WHERE created_at >= NOW() - INTERVAL '7 days'
   GROUP BY DATE(created_at);
   \`\`\`

### Проверка ошибок

\`\`\`sql
SELECT 
  error_message,
  COUNT(*) as error_count
FROM webhook_logs 
WHERE status = 'error' 
  AND created_at >= NOW() - INTERVAL '24 hours'
GROUP BY error_message
ORDER BY error_count DESC;
\`\`\`

## 🎯 Примеры использования

### Пример 1: Импорт остатков материалов

1. **Подготовьте файл** \`materials.csv\`:
   \`\`\`csv
   Название,Артикул,Категория,Остаток,Мин.остаток,Поставщик,Единица,Цена
   EGGER H1137 ST9,H1137-ST9,ЛДСП,50,10,EGGER,м²,2500
   Кромка ABS 2мм,ABS-2MM,Кромка,200,50,EGGER,м,45
   \`\`\`

2. **Загрузите через интерфейс** или поместите в папку мониторинга

3. **Проверьте результат** в разделе "Материалы"

### Пример 2: Импорт спецификации изделия

1. **Подготовьте файл** \`bom.csv\`:
   \`\`\`csv
   Изделие,Артикул_изделия,Материал,Артикул_материала,Количество,Единица
   Шкаф кухонный,SK-001,EGGER H1137 ST9,H1137-ST9,2.5,м²
   Шкаф кухонный,SK-001,Кромка ABS 2мм,ABS-2MM,8,м
   \`\`\`

2. **Загрузите файл** через интерфейс

3. **Проверьте спецификацию** в карточке изделия

### Пример 3: Автоматический импорт каждый день

1. **Настройте планировщик** с расписанием \`0 9 * * *\`
2. **Укажите URL** файла от поставщика
3. **Включите уведомления** в Slack
4. **Система будет автоматически** импортировать данные каждый день в 9:00

## 📞 Поддержка

Если у вас возникли проблемы:

1. **Проверьте логи** в базе данных
2. **Убедитесь в правильности формата** CSV файла
3. **Проверьте настройки** переменных окружения
4. **Обратитесь к администратору** системы

## 🔄 Обновления

Система автоматически обновляется при деплое новых версий. Следите за уведомлениями об обновлениях.

**Последнее обновление:** Декабрь 2024
**Версия:** 1.0.0
      `
    },
    {
      id: 'notifications',
      title: 'Система уведомлений и оповещений',
      description: 'Настройка звуковых и визуальных уведомлений',
      category: 'Настройки',
      icon: Bell,
      color: 'bg-green-500',
      content: `
# 🔔 Система уведомлений и оповещений

## 🎯 Обзор системы

Система уведомлений обеспечивает мгновенную обратную связь о всех действиях в системе. Поддерживаются звуковые сигналы, визуальные уведомления и системные уведомления браузера.

## ⚙️ Настройки

### Доступ к настройкам
Перейдите в раздел **"Настройки уведомлений"** в боковом меню.

### Основные параметры

1. **Система уведомлений** - включение/отключение всех уведомлений
2. **Звуковые уведомления** - воспроизведение звуков для разных типов событий
3. **Системные уведомления** - показ уведомлений операционной системы

### Настройки отображения

- **Позиция на экране** - выбор угла экрана для показа уведомлений
- **Длительность показа** - от 1 до 10 секунд
- **Максимальное количество** - от 1 до 10 уведомлений одновременно

## 🔊 Типы звуков

- **Успех** - мелодичный звук (C5-E5-G5)
- **Ошибка** - тревожный звук (A3-G3-F3)
- **Предупреждение** - предупреждающий звук (A4-B4-A4)
- **Информация** - нейтральный звук (C5-D5)

## 🎨 Типы уведомлений

- **Успех** - зеленые уведомления с мелодичным звуком
- **Ошибка** - красные уведомления с тревожным звуком
- **Предупреждение** - желтые уведомления с предупреждающим звуком
- **Информация** - синие уведомления без звука

## 🧪 Тестирование

Используйте кнопки тестирования в настройках для проверки разных типов уведомлений.
      `
    },
    {
      id: 'production-workflow',
      title: 'Рабочий процесс производства',
      description: 'Пошаговое руководство по управлению производством',
      category: 'Процессы',
      icon: Settings,
      color: 'bg-purple-500',
      content: `
# 🏭 Рабочий процесс производства

## 📋 Основные этапы

1. **Планирование** - создание изделия и определение требований
2. **Материалы** - добавление спецификации и проверка остатков
3. **Производство** - выполнение работ и контроль качества
4. **Завершение** - финальная проверка и отгрузка

## 🔄 Автоматический расчет прогресса

Система автоматически рассчитывает прогресс изделия на основе:
- Статуса изделия
- Результатов проверок качества
- Готовности материалов
- Соблюдения сроков

## 📊 Статистика производства

- **В работе** - изделия в процессе производства
- **Завершено** - готовые изделия
- **Требуют материалов** - изделия с недостаточными остатками

## 🎯 Контроль качества

Система поддерживает различные чек-листы проверок:
- Стандартная проверка мебели
- Проверка 3D моделей
- Предотгрузочная проверка
- Входной контроль
- Экспресс проверка
      `
    }
  ];

  const categories = [...new Set(knowledgeItems.map(item => item.category))];

  return (
    <div className="container mx-auto p-6 space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold flex items-center gap-2">
            <BookOpen className="h-8 w-8" />
            База знаний
          </h1>
          <p className="text-muted-foreground mt-2">
            Документация и инструкции по работе с системой
          </p>
        </div>
        <Badge variant="outline" className="text-sm">
          {knowledgeItems.length} статей
        </Badge>
      </div>

      {/* Категории */}
      <div className="flex flex-wrap gap-2">
        {categories.map((category) => (
          <Badge key={category} variant="secondary" className="text-sm">
            {category}
          </Badge>
        ))}
      </div>

      {/* Статьи */}
      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
        {knowledgeItems.map((item) => {
          const Icon = item.icon;
          return (
            <Card key={item.id} className="hover:shadow-md transition-shadow cursor-pointer">
              <CardHeader className="pb-3">
                <CardTitle className="text-lg flex items-center gap-2">
                  <div className={`p-2 rounded-lg ${item.color} text-white`}>
                    <Icon className="h-4 w-4" />
                  </div>
                  {item.title}
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <p className="text-sm text-muted-foreground">
                  {item.description}
                </p>
                <div className="flex items-center justify-between">
                  <Badge variant="outline" className="text-xs">
                    {item.category}
                  </Badge>
                  <Button variant="ghost" size="sm" className="text-xs">
                    Читать →
                  </Button>
                </div>
              </CardContent>
            </Card>
          );
        })}
      </div>

      {/* Быстрый доступ */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Zap className="h-5 w-5" />
            Быстрый доступ
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
            <Button variant="outline" className="h-auto p-4 flex flex-col items-center gap-2">
              <Upload className="h-6 w-6" />
              <span className="text-sm">Импорт CSV</span>
            </Button>
            <Button variant="outline" className="h-auto p-4 flex flex-col items-center gap-2">
              <Bell className="h-6 w-6" />
              <span className="text-sm">Настройки уведомлений</span>
            </Button>
            <Button variant="outline" className="h-auto p-4 flex flex-col items-center gap-2">
              <Settings className="h-6 w-6" />
              <span className="text-sm">Производство</span>
            </Button>
            <Button variant="outline" className="h-auto p-4 flex flex-col items-center gap-2">
              <Database className="h-6 w-6" />
              <span className="text-sm">База данных</span>
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}