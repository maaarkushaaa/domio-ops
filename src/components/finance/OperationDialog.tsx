import { useState, useEffect } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Calendar } from '@/components/ui/calendar';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { CalendarIcon, Plus, Tag, User } from 'lucide-react';
import { format } from 'date-fns';
import { ru } from 'date-fns/locale';
import { safeFormatCurrency } from '@/utils/safeFormat';
import { useFinance, FinancialOperation } from '@/hooks/use-finance';
import { useAppNotifications } from '@/components/NotificationIntegration';
import { toast } from '@/hooks/use-toast';

interface OperationDialogProps {
  trigger?: React.ReactNode;
  accountId?: string;
  operation?: FinancialOperation;
  onSuccess?: () => void;
}

const OPERATION_TYPES = [
  { value: 'income', label: '–î–æ—Ö–æ–¥', icon: 'üí∞' },
  { value: 'expense', label: '–†–∞—Å—Ö–æ–¥', icon: 'üí∏' },
  { value: 'transfer', label: '–ü–µ—Ä–µ–≤–æ–¥', icon: 'üîÑ' }
];

const CATEGORIES = {
  income: [
    { value: '–ü—Ä–æ–¥–∞–∂–∏', subcategories: ['–ú–µ–±–µ–ª—å', '–£—Å–ª—É–≥–∏', '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏'] },
    { value: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', subcategories: ['–î–∏–≤–∏–¥–µ–Ω–¥—ã', '–ü—Ä–æ—Ü–µ–Ω—Ç—ã', '–†–æ—Å—Ç –∫–∞–ø–∏—Ç–∞–ª–∞'] },
    { value: '–ü—Ä–æ—á–µ–µ', subcategories: ['–í–æ–∑–≤—Ä–∞—Ç', '–ü–æ–¥–∞—Ä–∫–∏', '–ü—Ä–æ—á–µ–µ'] }
  ],
  expense: [
    { value: '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', subcategories: ['–ú–∞—Ç–µ—Ä–∏–∞–ª—ã', '–§—É—Ä–Ω–∏—Ç—É—Ä–∞', '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ'] },
    { value: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥', subcategories: ['–†–µ–∫–ª–∞–º–∞', 'SMM', '–ö–æ–Ω—Ç–µ–Ω—Ç', '–°–æ–±—ã—Ç–∏—è'] },
    { value: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞', subcategories: ['–ó–∞—Ä–ø–ª–∞—Ç–∞', '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', '–•–æ—Å—Ç–∏–Ω–≥', '–õ–∏—Ü–µ–Ω–∑–∏–∏'] },
    { value: '–û–±—â–µ–µ', subcategories: ['–ê—Ä–µ–Ω–¥–∞', '–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ', '–û—Ñ–∏—Å', '–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è'] },
    { value: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', subcategories: ['–¢–æ–ø–ª–∏–≤–æ', '–†–µ–º–æ–Ω—Ç', '–°—Ç—Ä–∞—Ö–æ–≤–∫–∞', '–ù–∞–ª–æ–≥–∏'] },
    { value: '–ü—Ä–æ—á–µ–µ', subcategories: ['–†–∞–∑–Ω–æ–µ', '–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ'] }
  ],
  transfer: [
    { value: '–ú–µ–∂–¥—É —Å—á–µ—Ç–∞–º–∏', subcategories: ['–ü–µ—Ä–µ–≤–æ–¥', '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ', '–°–Ω—è—Ç–∏–µ'] },
    { value: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', subcategories: ['–ü–æ–∫—É–ø–∫–∞', '–ü—Ä–æ–¥–∞–∂–∞', '–†–µ–∏–Ω–≤–µ—Å—Ç'] }
  ]
};

export function OperationDialog({ trigger, accountId, operation, onSuccess }: OperationDialogProps) {
  const [open, setOpen] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  
  // –§–æ—Ä–º–∞
  const [type, setType] = useState<'income' | 'expense' | 'transfer'>('expense');
  const [amount, setAmount] = useState('');
  const [currency, setCurrency] = useState('RUB');
  const [category, setCategory] = useState('');
  const [subcategory, setSubcategory] = useState('');
  const [description, setDescription] = useState('');
  const [date, setDate] = useState<Date>(new Date());
  const [selectedClientId, setSelectedClientId] = useState('');
  const [selectedAccountId, setSelectedAccountId] = useState(accountId || '');

  const { createOperation, updateOperation, accounts } = useFinance();
  const { notifySuccess, notifyError } = useAppNotifications();

  const isEdit = !!operation;

  useEffect(() => {
    if (!accountId) {
      const defaultAccount = accounts.find((acc) => acc.is_default) || accounts.find((acc) => acc.is_active);
      if (defaultAccount && !selectedAccountId) {
        setSelectedAccountId(defaultAccount.id);
      }
    } else if (accountId !== selectedAccountId) {
      setSelectedAccountId(accountId);
    }
  }, [accounts, accountId, selectedAccountId]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!amount || !category || !selectedAccountId) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è',
        variant: 'destructive'
      });
      return;
    }

    setIsLoading(true);
    try {
      const operationData = {
        type,
        amount: parseFloat(amount),
        currency,
        category,
        subcategory: subcategory || undefined,
        description: description || undefined,
        date: date.toISOString().split('T')[0],
        account_id: selectedAccountId,
        tags: tags.length > 0 ? tags : undefined
      };

      if (isEdit) {
        await updateOperation(operation.id, operationData);
        notifySuccess('–û–ø–µ—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞', `–û–ø–µ—Ä–∞—Ü–∏—è "${description || category}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
      } else {
        await createOperation(operationData);
        notifySuccess('–û–ø–µ—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞', `–û–ø–µ—Ä–∞—Ü–∏—è "${description || category}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞`);
      }

      // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
      if (!isEdit) {
        setAmount('');
        setCategory('');
        setSubcategory('');
        setDescription('');
        setTags([]);
      }
      
      setOpen(false);
      onSuccess?.();
    } catch (error) {
      console.error('Error saving operation:', error);
      notifyError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é');
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é',
        variant: 'destructive'
      });
    } finally {
      setIsLoading(false);
    }
  };

  const addTag = () => {
    if (newTag.trim() && !tags.includes(newTag.trim())) {
      setTags([...tags, newTag.trim()]);
      setNewTag('');
    }
  };

  const removeTag = (tagToRemove: string) => {
    setTags(tags.filter(tag => tag !== tagToRemove));
  };

  const currentCategories = CATEGORIES[type] || [];

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        {trigger || <Button><Plus className="h-4 w-4 mr-2" />–ù–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è</Button>}
      </DialogTrigger>
      <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>
            {isEdit ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é' : '–°–æ–∑–¥–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é'}
          </DialogTitle>
          <DialogDescription>
            {isEdit ? '–ò–∑–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏' : '–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é'}
          </DialogDescription>
        </DialogHeader>
        
        <form onSubmit={handleSubmit} className="space-y-6">
          {/* –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ */}
          <div className="space-y-2">
            <Label>–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏</Label>
            <div className="grid grid-cols-3 gap-2">
              {OPERATION_TYPES.map((opType) => (
                <Button
                  key={opType.value}
                  type="button"
                  variant={type === opType.value ? 'default' : 'outline'}
                  onClick={() => {
                    setType(opType.value as any);
                    setCategory('');
                    setSubcategory('');
                  }}
                  className="flex items-center gap-2"
                >
                  <span>{opType.icon}</span>
                  {opType.label}
                </Button>
              ))}
            </div>
          </div>

          {/* –°—É–º–º–∞ –∏ –≤–∞–ª—é—Ç–∞ */}
          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="amount">–°—É–º–º–∞ *</Label>
              <Input
                id="amount"
                type="number"
                step="0.01"
                value={amount}
                onChange={(e) => setAmount(e.target.value)}
                placeholder="0.00"
                required
              />
            </div>
            <div className="space-y-2">
              <Label>–í–∞–ª—é—Ç–∞</Label>
              <Select value={currency} onValueChange={setCurrency}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="RUB">‚ÇΩ RUB</SelectItem>
                  <SelectItem value="USD">$ USD</SelectItem>
                  <SelectItem value="EUR">‚Ç¨ EUR</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          {/* –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è */}
          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è *</Label>
              <Select value={category} onValueChange={(value) => {
                setCategory(value);
                setSubcategory('');
              }} required>
                <SelectTrigger>
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é" />
                </SelectTrigger>
                <SelectContent>
                  {currentCategories.map((cat) => (
                    <SelectItem key={cat.value} value={cat.value}>
                      {cat.value}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-2">
              <Label>–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è</Label>
              <Select value={subcategory} onValueChange={setSubcategory}>
                <SelectTrigger>
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é" />
                </SelectTrigger>
                <SelectContent>
                  {currentCategories
                    .find(cat => cat.value === category)
                    ?.subcategories.map((sub) => (
                      <SelectItem key={sub} value={sub}>
                        {sub}
                      </SelectItem>
                    ))}
                </SelectContent>
              </Select>
            </div>
          </div>

          {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
          <div className="space-y-2">
            <Label htmlFor="description">–û–ø–∏—Å–∞–Ω–∏–µ</Label>
            <Textarea
              id="description"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"
              rows={3}
            />
          </div>

          {/* –î–∞—Ç–∞ –∏ —Å—á–µ—Ç */}
          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label>–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏</Label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button variant="outline" className="w-full justify-start text-left font-normal">
                    <CalendarIcon className="mr-2 h-4 w-4" />
                    {date ? format(date, 'dd.MM.yyyy', { locale: ru }) : '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É'}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0">
                  <Calendar
                    mode="single"
                    selected={date}
                    onSelect={(newDate) => newDate && setDate(newDate)}
                    initialFocus
                  />
                </PopoverContent>
              </Popover>
            </div>
            <div className="space-y-2">
              <Label>–°—á–µ—Ç *</Label>
              <Select value={selectedAccountId} onValueChange={setSelectedAccountId} required>
                <SelectTrigger>
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç" />
                </SelectTrigger>
                <SelectContent>
                  {accounts.filter(acc => acc.is_active).map((account) => (
                    <SelectItem key={account.id} value={account.id}>
                      {account.name} ({safeFormatCurrency(account.balance, account.currency)})
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>

          {/* –¢–µ–≥–∏ */}
          <div className="space-y-2">
            <Label>–¢–µ–≥–∏</Label>
            <div className="flex gap-2">
              <Input
                value={newTag}
                onChange={(e) => setNewTag(e.target.value)}
                placeholder="–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥"
                onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addTag())}
              />
              <Button type="button" variant="outline" onClick={addTag}>
                <Plus className="h-4 w-4" />
              </Button>
            </div>
            {tags.length > 0 && (
              <div className="flex flex-wrap gap-2 mt-2">
                {tags.map((tag) => (
                  <div
                    key={tag}
                    className="flex items-center gap-1 px-2 py-1 bg-secondary rounded-md text-sm"
                  >
                    <Tag className="h-3 w-3" />
                    {tag}
                    <Button
                      type="button"
                      variant="ghost"
                      size="sm"
                      onClick={() => removeTag(tag)}
                      className="h-4 w-4 p-0 hover:bg-destructive hover:text-destructive-foreground"
                    >
                      √ó
                    </Button>
                  </div>
                ))}
              </div>
            )}
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ */}
          <div className="flex justify-end gap-2 pt-4">
            <Button type="button" variant="outline" onClick={() => setOpen(false)}>
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button type="submit" disabled={isLoading}>
              {isLoading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : (isEdit ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å')}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
}