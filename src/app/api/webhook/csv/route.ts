import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/integrations/supabase/client';

interface WebhookPayload {
  type: 'materials' | 'bom';
  data: any[];
  source: string;
  timestamp: string;
  webhookId?: string;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ–±-—Ö—É–∫–∞
async function processWebhookData(payload: WebhookPayload) {
  const result = { success: 0, errors: 0, details: [] };

  try {
    if (payload.type === 'materials') {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
      for (const item of payload.data) {
        try {
          // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª
          let query = supabase.from('materials').select('id');
          if (item.sku) {
            query = query.eq('sku', item.sku);
          } else {
            query = query.eq('name', item.name);
          }

          const { data: existingMaterial } = await query.single();

          if (existingMaterial) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
            const { error } = await supabase
              .from('materials')
              .update({
                stock_quantity: item.stock_quantity || 0,
                min_stock: item.min_stock || 0,
                supplier: item.supplier || null,
                category: item.category || null,
                unit: item.unit || '—à—Ç',
                updated_at: new Date().toISOString()
              })
              .eq('id', existingMaterial.id);

            if (error) {
              result.errors++;
              result.details.push(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${item.name}: ${error.message}`);
            } else {
              result.success++;
              result.details.push(`–û–±–Ω–æ–≤–ª–µ–Ω: ${item.name}`);
            }
          } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            const { error } = await supabase
              .from('materials')
              .insert({
                name: item.name,
                sku: item.sku || null,
                category: item.category || null,
                unit: item.unit || '—à—Ç',
                price_per_unit: item.price_per_unit || 0,
                stock_quantity: item.stock_quantity || 0,
                min_stock: item.min_stock || 0,
                supplier: item.supplier || null,
                notes: `–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ –≤–µ–±-—Ö—É–∫ –æ—Ç ${payload.source}`,
              });

            if (error) {
              result.errors++;
              result.details.push(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ${item.name}: ${error.message}`);
            } else {
              result.success++;
              result.details.push(`–°–æ–∑–¥–∞–Ω: ${item.name}`);
            }
          }
        } catch (error) {
          result.errors++;
          result.details.push(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${item.name}: ${(error as Error).message}`);
        }
      }
    } else if (payload.type === 'bom') {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ BOM
      const productGroups: Record<string, { product_name: string; product_sku?: string; materials: any[] }> = {};
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∏–∑–¥–µ–ª–∏—è–º
      for (const item of payload.data) {
        const key = `${item.product_name}_${item.product_sku || ''}`;
        if (!productGroups[key]) {
          productGroups[key] = {
            product_name: item.product_name,
            product_sku: item.product_sku,
            materials: []
          };
        }
        productGroups[key].materials.push(item);
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–¥–µ–ª–∏–µ
      for (const [key, group] of Object.entries(productGroups)) {
        try {
          // –ù–∞—Ö–æ–¥–∏–º –∏–∑–¥–µ–ª–∏–µ
          let productQuery = supabase.from('products').select('id');
          if (group.product_sku) {
            productQuery = productQuery.eq('sku', group.product_sku);
          } else {
            productQuery = productQuery.eq('name', group.product_name);
          }

          const { data: product } = await productQuery.single();
          if (!product) {
            result.errors++;
            result.details.push(`–ò–∑–¥–µ–ª–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: ${group.product_name}`);
            continue;
          }

          // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
          await supabase
            .from('product_materials')
            .delete()
            .eq('product_id', product.id);

          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
          for (const material of group.materials) {
            try {
              // –ù–∞—Ö–æ–¥–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª
              let materialQuery = supabase.from('materials').select('id');
              if (material.material_sku) {
                materialQuery = materialQuery.eq('sku', material.material_sku);
              } else {
                materialQuery = materialQuery.eq('name', material.material_name);
              }

              const { data: materialData } = await materialQuery.single();
              if (!materialData) {
                result.errors++;
                result.details.push(`–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${material.material_name}`);
                continue;
              }

              // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å
              const { error } = await supabase
                .from('product_materials')
                .insert({
                  product_id: product.id,
                  material_id: materialData.id,
                  quantity: material.quantity,
                });

              if (error) {
                result.errors++;
                result.details.push(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ${material.material_name}: ${error.message}`);
              } else {
                result.success++;
                result.details.push(`–î–æ–±–∞–≤–ª–µ–Ω: ${material.material_name} –∫ ${group.product_name}`);
              }
            } catch (error) {
              result.errors++;
              result.details.push(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ ${material.material_name}: ${(error as Error).message}`);
            }
          }
        } catch (error) {
          result.errors++;
          result.details.push(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–¥–µ–ª–∏—è ${group.product_name}: ${(error as Error).message}`);
        }
      }
    }

    return result;
  } catch (error) {
    result.errors++;
    result.details.push(`–û–±—â–∞—è –æ—à–∏–±–∫–∞: ${(error as Error).message}`);
    return result;
  }
}

// API endpoint –¥–ª—è –≤–µ–±-—Ö—É–∫–æ–≤
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –≤–µ–±-—Ö—É–∫–∞ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞)
    const signature = request.headers.get('x-webhook-signature');
    const webhookSecret = process.env.WEBHOOK_SECRET;
    
    if (webhookSecret && signature) {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏ HMAC
      // const expectedSignature = crypto
      //   .createHmac('sha256', webhookSecret)
      //   .update(JSON.stringify(body))
      //   .digest('hex');
      // 
      // if (signature !== `sha256=${expectedSignature}`) {
      //   return NextResponse.json({ error: '–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å' }, { status: 401 });
      // }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è payload
    if (!body.type || !body.data || !Array.isArray(body.data)) {
      return NextResponse.json({ 
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –û–∂–∏–¥–∞–µ—Ç—Å—è: {type, data[]}' 
      }, { status: 400 });
    }

    if (!['materials', 'bom'].includes(body.type)) {
      return NextResponse.json({ 
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: materials, bom' 
      }, { status: 400 });
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const result = await processWebhookData({
      type: body.type,
      data: body.data,
      source: body.source || 'unknown',
      timestamp: body.timestamp || new Date().toISOString(),
      webhookId: body.webhookId
    });

    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log(`üìä –í–µ–±-—Ö—É–∫ ${body.type}: ${result.success} —É—Å–ø–µ—à–Ω–æ, ${result.errors} –æ—à–∏–±–æ–∫`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –≤–µ–±-—Ö—É–∫–∞
    await supabase
      .from('webhook_logs')
      .insert({
        webhook_id: body.webhookId,
        type: body.type,
        source: body.source || 'unknown',
        success_count: result.success,
        error_count: result.errors,
        details: result.details,
        payload: body,
        processed_at: new Date().toISOString()
      });

    return NextResponse.json({
      success: true,
      result: result,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±-—Ö—É–∫–∞:', error);
    return NextResponse.json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: (error as Error).message 
    }, { status: 500 });
  }
}

// GET endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
export async function GET() {
  return NextResponse.json({
    status: 'active',
    endpoints: {
      materials: 'POST /api/webhook/csv - –∏–º–ø–æ—Ä—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤',
      bom: 'POST /api/webhook/csv - –∏–º–ø–æ—Ä—Ç BOM'
    },
    format: {
      type: 'materials | bom',
      data: 'array of objects',
      source: 'string (optional)',
      timestamp: 'ISO string (optional)',
      webhookId: 'string (optional)'
    },
    examples: {
      materials: {
        type: 'materials',
        data: [
          {
            name: 'EGGER H1137 ST9 –î—É–± –ì–∞–ª–∏—Ñ–∞–∫—Å –±–µ–ª—ã–π',
            sku: 'H1137',
            category: '–õ–î–°–ü EGGER',
            stock_quantity: 25.5,
            min_stock: 10,
            supplier: 'EGGER',
            unit: '–º¬≤'
          }
        ],
        source: 'warehouse_system',
        timestamp: new Date().toISOString()
      },
      bom: {
        type: 'bom',
        data: [
          {
            product_name: '–°—Ç–æ–ª –ø–∏—Å—å–º–µ–Ω–Ω—ã–π –õ–æ—Ñ—Ç',
            product_sku: 'STL-004',
            material_name: 'EGGER H1137 ST9 –î—É–± –ì–∞–ª–∏—Ñ–∞–∫—Å –±–µ–ª—ã–π',
            material_sku: 'H1137',
            quantity: 2.5,
            unit: '–º¬≤'
          }
        ],
        source: 'cad_system',
        timestamp: new Date().toISOString()
      }
    }
  });
}
